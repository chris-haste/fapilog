{
  "url": "https://api.github.com/repos/chris-haste/fapilog/issues/122",
  "repository_url": "https://api.github.com/repos/chris-haste/fapilog",
  "labels_url": "https://api.github.com/repos/chris-haste/fapilog/issues/122/labels{/name}",
  "comments_url": "https://api.github.com/repos/chris-haste/fapilog/issues/122/comments",
  "events_url": "https://api.github.com/repos/chris-haste/fapilog/issues/122/events",
  "html_url": "https://github.com/chris-haste/fapilog/issues/122",
  "id": 3332153359,
  "node_id": "I_kwDOPYr7A87GnKAP",
  "number": 122,
  "title": "Performance: Remove dict(payload) copy in _async_enqueue for zero-copy data flow",
  "user": {
    "login": "chris-haste",
    "id": 61118278,
    "node_id": "MDQ6VXNlcjYxMTE4Mjc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/61118278?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chris-haste",
    "html_url": "https://github.com/chris-haste",
    "followers_url": "https://api.github.com/users/chris-haste/followers",
    "following_url": "https://api.github.com/users/chris-haste/following{/other_user}",
    "gists_url": "https://api.github.com/users/chris-haste/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chris-haste/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chris-haste/subscriptions",
    "organizations_url": "https://api.github.com/users/chris-haste/orgs",
    "repos_url": "https://api.github.com/users/chris-haste/repos",
    "events_url": "https://api.github.com/users/chris-haste/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chris-haste/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "labels": [
    {
      "id": 9060102275,
      "node_id": "LA_kwDOPYr7A88AAAACHAYwgw",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/enhancement",
      "name": "enhancement",
      "color": "a2eeef",
      "default": true,
      "description": "New feature or request"
    },
    {
      "id": 9066783520,
      "node_id": "LA_kwDOPYr7A88AAAACHGwjIA",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/story",
      "name": "story",
      "color": "0366d6",
      "default": false,
      "description": "User story for development"
    },
    {
      "id": 9066784033,
      "node_id": "LA_kwDOPYr7A88AAAACHGwlIQ",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/status:ready",
      "name": "status:ready",
      "color": "28a745",
      "default": false,
      "description": "Ready for development"
    },
    {
      "id": 9066784359,
      "node_id": "LA_kwDOPYr7A88AAAACHGwmZw",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/priority:high",
      "name": "priority:high",
      "color": "d73a4a",
      "default": false,
      "description": "High priority"
    },
    {
      "id": 9066784604,
      "node_id": "LA_kwDOPYr7A88AAAACHGwnXA",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/points:3",
      "name": "points:3",
      "color": "7057ff",
      "default": false,
      "description": "3 story points"
    },
    {
      "id": 9066790882,
      "node_id": "LA_kwDOPYr7A88AAAACHGw_4g",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/epic:core-foundation",
      "name": "epic:core-foundation",
      "color": "0366d6",
      "default": false,
      "description": "Core foundation and architecture stories"
    },
    {
      "id": 9083333152,
      "node_id": "LA_kwDOPYr7A88AAAACHWiqIA",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/epic:performance-revolution",
      "name": "epic:performance-revolution",
      "color": "0366d6",
      "default": false,
      "description": "Performance Revolution - Zero-copy operations and parallel processing for revolutionary throughput"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "chris-haste",
    "id": 61118278,
    "node_id": "MDQ6VXNlcjYxMTE4Mjc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/61118278?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chris-haste",
    "html_url": "https://github.com/chris-haste",
    "followers_url": "https://api.github.com/users/chris-haste/followers",
    "following_url": "https://api.github.com/users/chris-haste/following{/other_user}",
    "gists_url": "https://api.github.com/users/chris-haste/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chris-haste/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chris-haste/subscriptions",
    "organizations_url": "https://api.github.com/users/chris-haste/orgs",
    "repos_url": "https://api.github.com/users/chris-haste/repos",
    "events_url": "https://api.github.com/users/chris-haste/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chris-haste/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "chris-haste",
      "id": 61118278,
      "node_id": "MDQ6VXNlcjYxMTE4Mjc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/61118278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-haste",
      "html_url": "https://github.com/chris-haste",
      "followers_url": "https://api.github.com/users/chris-haste/followers",
      "following_url": "https://api.github.com/users/chris-haste/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-haste/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-haste/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-haste/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-haste/orgs",
      "repos_url": "https://api.github.com/users/chris-haste/repos",
      "events_url": "https://api.github.com/users/chris-haste/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-haste/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2025-08-18T21:18:19Z",
  "updated_at": "2025-08-19T00:27:31Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "sub_issues_summary": {
    "total": 0,
    "completed": 0,
    "percent_completed": 0
  },
  "body": "## Epic\nPerformance Revolution (primary). Secondary: Core Foundation.\n\n## Story Points\n3\n\n## User Story\nAs a developer, I want to eliminate unnecessary payload copying in `_enqueue` so that async logging reduces allocations and improves throughput without changing behavior.\n\n## Acceptance Criteria\n- Remove the `dict(payload)` copy in both the same-thread and cross-thread enqueue paths in `SyncLoggerFacade` when `payload` is already a dict from `LogEvent.to_mapping()`.\n- Ensure payload remains unchanged until enrichment/redaction; no in-place mutation before `_flush_batch`.\n- Preserve behavior and error handling; no regressions in sampling, dedupe, diagnostics, or metrics.\n- Add tests that verify identity preservation (no deep copy) across enqueue and that enrichment/redaction still works as expected.\n- Benchmark demonstrates a measurable reduction (target 15-25%) in allocation counts in the async path.\n\n## Technical Tasks\n1) Logger updates (`src/fapilog/core/logger.py`)\n- In `_enqueue` same-thread path, replace `self._queue.try_enqueue(dict(payload))` with `self._queue.try_enqueue(payload)` when `payload` is a dict (which it is from `LogEvent.to_mapping()`).\n- In cross-thread path, update the `run_coroutine_threadsafe` call to pass `payload` directly; update `_async_enqueue` signature to accept `Mapping[str, Any] | dict[str, Any]` if needed but avoid copying.\n- Audit any other call sites that may call `dict(...)` on payload and remove redundant copies.\n\n2) Safety review\n- Confirm `LogEvent.to_mapping()` returns a dict (it does) and is not mutated prior to enrichment.\n- Ensure `NonBlockingRingQueue` stores references safely and is only written by the producer.\n- Validate enrichers/redactors either work with the original mapping or return a new one without mutating shared state.\n\n3) Tests\n- Add a unit test that injects a sentinel object into `metadata` and asserts the same object identity is observed in the item dequeued by the worker (no deep copy before enqueue).\n- Add tests for both same-thread and cross-thread enqueue modes.\n\n4) Benchmarks\n- Extend `scripts/benchmarking.py` to compare allocation counts with and without the change and report improvement.\n\n## Dev Notes\n- Relevant code: `src/fapilog/core/events.py` (`LogEvent.to_mapping()`), `src/fapilog/core/logger.py` (`_enqueue`, `_async_enqueue`).\n- Architecture refs: `docs/architecture/core-workflows.md` (pipeline), `docs/architecture/components.md` (AsyncQueue).\n\n## Testing Strategy\n- Follow `docs/architecture/test-strategy-and-standards.md`.\n- Ensure CI runs both fast path (if present) and standard path unaffected by this change.\n\n## Success Criteria\n- No redundant copying prior to enrichment.\n- Lower allocation counts in async path without functional regressions.\n- All tests pass across platforms.\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/chris-haste/fapilog/issues/122/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/chris-haste/fapilog/issues/122/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
