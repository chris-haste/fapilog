# Story 4.12: Alerting Interface (Core No-op + Extras Providers)

## Status
Draft

## Story
**As an** SRE/ops engineer,
**I want** a core alerting interface with a no-op dispatcher and pluggable providers in extras,
**so that** we can route compliance and error alerts to channels like email, Slack, PagerDuty without coupling core to vendors.

## Acceptance Criteria
1. Define `AlertDispatcher` Protocol with async `send_alert(event: AuditEvent, *, severity: str, channel: str | None = None)`.
2. Provide `NoopAlertDispatcher` in core; `AuditTrail` can be configured with a dispatcher.
3. `AuditTrail` uses dispatcher when compliance alert conditions are met; no change when no dispatcher provided.
4. Document provider guidance for extras (Slack, PagerDuty, Opsgenie, webhooks) with retry/backoff expectations.
5. Unit tests: Noop dispatcher integration path and mocked dispatcher call assertions.

## Tasks / Subtasks
- [ ] Define `AlertDispatcher` Protocol and `NoopAlertDispatcher`
- [ ] Add optional dispatcher to `AuditTrail` ctor
- [ ] Invoke dispatcher in `_send_compliance_alert`
- [ ] Update docs: epic 4 and components
- [ ] Unit tests with mock dispatcher

## Dev Notes
- Relevant Source Tree
  - `src/fapilog/core/audit.py`: `_send_compliance_alert`, `AuditTrail` constructor
- Patterns & Constraints
  - Never raise from dispatcher calls; errors swallowed/logged in audit processing loop
  - Backpressure/retry is responsibility of providers (extras)

## Testing
- Mock dispatcher collects calls; assert called with expected event and severity
- Noop dispatcher produces no side effects

## Change Log
| Date | Version | Description | Author |
| ---- | ------- | ----------- | ------ |
| 2025-08-11 | 0.1 | Draft story created | QA Agent |


