{
  "url": "https://api.github.com/repos/chris-haste/fapilog/issues/120",
  "repository_url": "https://api.github.com/repos/chris-haste/fapilog",
  "labels_url": "https://api.github.com/repos/chris-haste/fapilog/issues/120/labels{/name}",
  "comments_url": "https://api.github.com/repos/chris-haste/fapilog/issues/120/comments",
  "events_url": "https://api.github.com/repos/chris-haste/fapilog/issues/120/events",
  "html_url": "https://github.com/chris-haste/fapilog/issues/120",
  "id": 3332149374,
  "node_id": "I_kwDOPYr7A87GnJB-",
  "number": 120,
  "title": "Performance: Implement serialize_in_flush=True fast path for zero-copy serialization",
  "user": {
    "login": "chris-haste",
    "id": 61118278,
    "node_id": "MDQ6VXNlcjYxMTE4Mjc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/61118278?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chris-haste",
    "html_url": "https://github.com/chris-haste",
    "followers_url": "https://api.github.com/users/chris-haste/followers",
    "following_url": "https://api.github.com/users/chris-haste/following{/other_user}",
    "gists_url": "https://api.github.com/users/chris-haste/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chris-haste/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chris-haste/subscriptions",
    "organizations_url": "https://api.github.com/users/chris-haste/orgs",
    "repos_url": "https://api.github.com/users/chris-haste/repos",
    "events_url": "https://api.github.com/users/chris-haste/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chris-haste/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "labels": [
    {
      "id": 9060102275,
      "node_id": "LA_kwDOPYr7A88AAAACHAYwgw",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/enhancement",
      "name": "enhancement",
      "color": "a2eeef",
      "default": true,
      "description": "New feature or request"
    },
    {
      "id": 9066783520,
      "node_id": "LA_kwDOPYr7A88AAAACHGwjIA",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/story",
      "name": "story",
      "color": "0366d6",
      "default": false,
      "description": "User story for development"
    },
    {
      "id": 9066784033,
      "node_id": "LA_kwDOPYr7A88AAAACHGwlIQ",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/status:ready",
      "name": "status:ready",
      "color": "28a745",
      "default": false,
      "description": "Ready for development"
    },
    {
      "id": 9066784359,
      "node_id": "LA_kwDOPYr7A88AAAACHGwmZw",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/priority:high",
      "name": "priority:high",
      "color": "d73a4a",
      "default": false,
      "description": "High priority"
    },
    {
      "id": 9066790882,
      "node_id": "LA_kwDOPYr7A88AAAACHGw_4g",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/epic:core-foundation",
      "name": "epic:core-foundation",
      "color": "0366d6",
      "default": false,
      "description": "Core foundation and architecture stories"
    },
    {
      "id": 9066792337,
      "node_id": "LA_kwDOPYr7A88AAAACHGxFkQ",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/points:5",
      "name": "points:5",
      "color": "7057ff",
      "default": false,
      "description": "5 story points"
    },
    {
      "id": 9083333152,
      "node_id": "LA_kwDOPYr7A88AAAACHWiqIA",
      "url": "https://api.github.com/repos/chris-haste/fapilog/labels/epic:performance-revolution",
      "name": "epic:performance-revolution",
      "color": "0366d6",
      "default": false,
      "description": "Performance Revolution - Zero-copy operations and parallel processing for revolutionary throughput"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "chris-haste",
    "id": 61118278,
    "node_id": "MDQ6VXNlcjYxMTE4Mjc4",
    "avatar_url": "https://avatars.githubusercontent.com/u/61118278?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chris-haste",
    "html_url": "https://github.com/chris-haste",
    "followers_url": "https://api.github.com/users/chris-haste/followers",
    "following_url": "https://api.github.com/users/chris-haste/following{/other_user}",
    "gists_url": "https://api.github.com/users/chris-haste/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chris-haste/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chris-haste/subscriptions",
    "organizations_url": "https://api.github.com/users/chris-haste/orgs",
    "repos_url": "https://api.github.com/users/chris-haste/repos",
    "events_url": "https://api.github.com/users/chris-haste/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chris-haste/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "chris-haste",
      "id": 61118278,
      "node_id": "MDQ6VXNlcjYxMTE4Mjc4",
      "avatar_url": "https://avatars.githubusercontent.com/u/61118278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-haste",
      "html_url": "https://github.com/chris-haste",
      "followers_url": "https://api.github.com/users/chris-haste/followers",
      "following_url": "https://api.github.com/users/chris-haste/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-haste/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-haste/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-haste/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-haste/orgs",
      "repos_url": "https://api.github.com/users/chris-haste/repos",
      "events_url": "https://api.github.com/users/chris-haste/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-haste/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2025-08-18T21:17:20Z",
  "updated_at": "2025-08-19T00:26:31Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "sub_issues_summary": {
    "total": 0,
    "completed": 0,
    "percent_completed": 0
  },
  "body": "## Epic\nPerformance Revolution (primary). Secondary: Core Foundation.\n\n## Story Points\n5\n\n## User Story\nAs a developer, I want a flush-time zero-copy serialization fast path so that high-volume logging minimizes allocations and improves throughput and latency.\n\n## Acceptance Criteria\n- Fast path can be enabled via a configuration toggle `serialize_in_flush=True` on the logger facade; default is False to preserve current behavior.\n- When enabled, each finalized entry is serialized at most once in the flush path after enrichment and redaction, producing a `SerializedView` that sinks consume without re-serializing.\n- Built-in sinks updated to support the fast path without breaking existing dict-based `write` behavior. When fast path is off, behavior is unchanged.\n- For JSONL outputs, newline is added without copying payload buffers, using existing helpers (e.g., `convert_json_bytes_to_jsonl`).\n- Strict envelope mode semantics are preserved (if strict and envelope serialization fails, the entry is not emitted). In non-strict mode, fallback to best-effort JSON serialization remains.\n- Comprehensive unit and integration tests cover both modes (on/off) and verify zero additional serializations occur in sinks when fast path is enabled.\n- Benchmark demonstrates a measurable reduction in serialization overhead (target >= 30 0n the provided benchmark scenario) with no regressions in correctness.\n\n## Technical Tasks\n1) Logger: Add configuration and serialization in flush\n- Location: `src/fapilog/core/logger.py`\n- Add a boolean flag `serialize_in_flush` to `SyncLoggerFacade` (constructor arg; default False).\n- In `_flush_batch`, after enrichment and redaction, when `serialize_in_flush` is True:\n  - Call `serialize_envelope(entry)` once to obtain `SerializedView`.\n  - Prefer passing a zero-copy friendly payload to sinks; see sink updates below.\n  - Preserve strict envelope mode behavior by catching exceptions similarly to sinks today and falling back only if strict is False.\n\n2) Sink interface: Optional fast-path method\n- Introduce a duck-typed optional method `write_serialized(view: SerializedView)` on sinks that can consume pre-serialized payloads.\n- Logger behavior: if `serialize_in_flush` is True and the sink implements `write_serialized`, call it; otherwise fallback to existing `write(entry: dict)` path.\n\n3) Update built-in sinks\n- `src/fapilog/plugins/sinks/stdout_json.py`:\n  - Add `async def write_serialized(self, view: SerializedView) -> None` that writes `view.data` plus a newline and flushes, avoiding re-serialization.\n  - Keep existing `write(entry: dict)` for backward compatibility.\n- `src/fapilog/plugins/sinks/rotating_file.py`:\n  - Add `async def write_serialized(self, view: SerializedView) -> None` that converts to JSONL via `convert_json_bytes_to_jsonl(view)` and appends segments without copying.\n  - In text mode, continue using the existing deterministic key=value formatting; only use the serialized path for JSON mode.\n\n4) Serialization helpers (no code changes expected)\n- Reuse existing utilities in `src/fapilog/core/serialization.py`:\n  - `serialize_envelope`, `serialize_mapping_to_json_bytes`, `convert_json_bytes_to_jsonl`, and `SerializedView`.\n\n5) Tests\n- Unit tests:\n  - New tests in `tests/unit/` for logger flush path toggling. Create a test sink that records whether `write_serialized` was invoked and that it receives the exact bytes produced by `serialize_envelope`.\n  - Verify strict vs non-strict behavior when serialization errors are induced.\n- Integration tests:\n  - Extend existing stdout and rotating file sink tests to run with fast path enabled and disabled, asserting identical outputs.\n- Benchmarks:\n  - Update `scripts/benchmarking.py` to include a case toggling `serialize_in_flush` and report per-entry serialization time and total allocations.\n\n6) Compatibility and Safety\n- Ensure all new code paths catch and contain errors (do not propagate from sinks).\n- Maintain current API contracts for sinks (existing `write(entry: dict)` remains supported).\n- No global state; configuration is per logger instance.\n\n## Dev Notes\n- Architecture alignment:\n  - Pipeline reference: `docs/architecture/core-workflows.md` (High-Performance Async Logging Workflow) shows enrichment and processing before sink writes. The fast path should serialize after enrichment/redaction and before sink I/O.\n  - Components: `docs/architecture/components.md` identifies `AsyncQueue` and `SinkPlugins`; the change concerns the handoff between logger flush and sinks for zero-copy.\n- Relevant code:\n  - Logger: `src/fapilog/core/logger.py` (`SyncLoggerFacade._flush_batch`)\n  - Serialization: `src/fapilog/core/serialization.py` (use `serialize_envelope`, `SerializedView`, `convert_json_bytes_to_jsonl`)\n  - Sinks: `src/fapilog/plugins/sinks/stdout_json.py`, `src/fapilog/plugins/sinks/rotating_file.py`\n- Suggested duck-typed signature for sinks:\n  - Optional: `async def write_serialized(self, view: SerializedView) -> None`\n  - Fallback remains: `async def write(self, entry: dict[str, Any]) -> None`\n- JSONL newline: prefer segmented write using `convert_json_bytes_to_jsonl` to avoid copies.\n- Future work: If multiple sinks are configured, the single serialization can be reused across all sinks that support the fast path; otherwise logger should either pass the same `SerializedView` to each or fallback per sink as needed.\n\n## Testing Strategy\n- Follow `docs/architecture/test-strategy-and-standards.md`.\n- Ensure tests cover both fast path enabled and disabled modes, strict and non-strict envelope modes, and confirm byte-for-byte invariants for outputs.\n\n## Success Criteria\n- Serialization performed at most once per entry when fast path is enabled.\n- JSONL newline added without copying payload buffers.\n- No regressions in existing tests; added tests pass.\n- Benchmark shows >= 30 percent reduction in serialization overhead in the provided scenario.\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/chris-haste/fapilog/issues/120/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/chris-haste/fapilog/issues/120/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
