[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fapilog"
version = "3.0.0-alpha.1"
description = "Revolutionary async-first logging library for Python applications"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Chris Haste", email = "chris@haste.dev"}
]
maintainers = [
    {name = "Chris Haste", email = "chris@haste.dev"}
]
keywords = ["logging", "async", "fastapi", "observability", "enterprise"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Logging",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: FastAPI",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    # Core async support
    "asyncio-mqtt>=0.16.0",
    "aiofiles>=23.0.0",
    
    # FastAPI and Pydantic v2
    "fastapi>=0.115.0",
    "pydantic>=2.11.0",
    "pydantic-settings>=2.0.0",
    
    # HTTP client for sinks
    "httpx>=0.24.0",
    
    # JSON and serialization
    "orjson>=3.9.0",
    
    # Version parsing for plugin compatibility
    "packaging>=23.0",
    
    # Metrics and monitoring
    "prometheus-client>=0.17.0",
    
    # Optional: System metrics
    "psutil>=5.9.0; sys_platform != 'win32'",
]

[project.optional-dependencies]
# Enterprise features
enterprise = [
    "cryptography>=41.0.0",
    "python-jose[cryptography]>=3.3.0",
]

# Loki integration
loki = [
    "prometheus-client>=0.17.0",
]

# Cloud integrations
cloud = [
    "boto3>=1.28.0",
    "google-cloud-logging>=3.8.0",
    "azure-monitor-opentelemetry>=1.0.0",
]

# SIEM integrations
siem = [
    "elasticsearch>=8.0.0",
    "pysplunk>=1.0.0",
]

# Development tools
dev = [
    "hatch>=1.7.0",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.0",
    "pytest-benchmark>=4.0.0",
    "ruff>=0.12.0",
    "mypy>=1.17.1",
    "pre-commit>=3.3.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "vulture>=2.9.0",
]

# Documentation
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]

# All optional dependencies
all = [
    "fapilog[enterprise,loki,cloud,siem,dev,docs]",
]

[project.urls]
Homepage = "https://github.com/chris-haste/fapilog"
Documentation = "https://fapilog.readthedocs.io/"
Repository = "https://github.com/chris-haste/fapilog"
"Bug Tracker" = "https://github.com/chris-haste/fapilog/issues"
"Plugin Marketplace" = "https://plugins.fapilog.dev/"
Discord = "https://discord.gg/fapilog"

[project.scripts]
fapilog = "fapilog.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/fapilog"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
    "README.md",
    "LICENSE",
    "pyproject.toml",
]

[tool.hatch.envs.default]
dependencies = [
    "hatch>=1.7.0",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.0",
    "pytest-benchmark>=4.0.0",
    "ruff>=0.12.0",
    "mypy>=1.17.1",
    "pre-commit>=3.3.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=src/fapilog --cov-report=html --cov-report=term {args:tests}"
test-benchmark = "pytest --benchmark-only {args:tests}"
lint = "ruff check {args:src tests}"
format = "ruff format {args:src tests}"
typecheck = "mypy --config-file pyproject.toml --explicit-package-bases src"
check = "pre-commit run --all-files"

# Lint environment
[tool.hatch.envs.lint]
detached = true
dependencies = [
    "ruff>=0.12.0",
]

[tool.hatch.envs.lint.env-vars]
PYTHONPATH = "src"

[tool.hatch.envs.lint.scripts]
lint = "ruff check src tests"
format = "ruff format src tests"

# Type checking environment  
[tool.hatch.envs.typecheck]
detached = true
dependencies = [
    "mypy>=1.17.1",
    "types-requests",
    "types-PyYAML",
    # Core runtime dependencies needed for type checking
    "fastapi>=0.115.0",
    "pydantic>=2.11.0",
    "pydantic-settings>=2.0.0",
    "httpx>=0.24.0",
    "orjson>=3.9.0",
    "packaging>=23.0",
    "prometheus-client>=0.17.0",
    "psutil>=5.9.0; sys_platform != 'win32'",
    # Test dependencies needed for type checking test files
    "pytest>=8.4.0",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.0",
    "pytest-benchmark>=4.0.0",
]

[tool.hatch.envs.typecheck.scripts]
typecheck = "mypy --config-file pyproject.toml --explicit-package-bases src"

# Test environment
[tool.hatch.envs.test]
dependencies = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.1.0", 
    "pytest-cov>=6.2.0",
    "pytest-benchmark>=4.0.0",
    # Core runtime dependencies needed for tests
    "fastapi>=0.115.0",
    "pydantic>=2.11.0",
    "pydantic-settings>=2.0.0",
    "httpx>=0.24.0",
    "orjson>=3.9.0",
    "prometheus-client>=0.17.0",
    "psutil>=5.9.0; sys_platform != 'win32'",
]

[tool.hatch.envs.test.env-vars]
PYTHONPATH = "src"

[tool.hatch.envs.test.scripts]
test = "python -m pytest tests"
test-cov = "python -m pytest --cov=src/fapilog --cov-report=html --cov-report=term tests"
test-benchmark = "python -m pytest --benchmark-only tests"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--asyncio-mode=auto",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmark tests",
    "enterprise: marks tests as enterprise features",
]

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Pydantic plugin for v2 support
plugins = ["pydantic.mypy"]
# Allow optional 3rd-party imports like orjson in environments without types
ignore_missing_imports = true
# Package resolution
explicit_package_bases = true
namespace_packages = true
mypy_path = "src"

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
warn_return_any = false
warn_unused_ignores = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["fapilog.core.settings"]
# Pydantic v2 field_validator decorators need type ignores until MyPy catches up
warn_unused_ignores = false

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.vulture]
exclude = [
    "src/fapilog/__init__.py",  # VERSION is used for compatibility
    "src/fapilog/containers/container.py",  # API methods intentionally unused
    "src/fapilog/containers/lifecycle.py",  # API methods for container lifecycle
    "src/fapilog/core/events.py",  # Enum values and API methods
    "src/fapilog/core/logger.py",  # API methods and context manager params
    "src/fapilog/core/settings.py",  # Enum values and validator methods
    "src/fapilog/plugins/marketplace.py",  # API methods
    "src/fapilog/plugins/registry.py",  # API methods
    "src/fapilog/plugins/discovery.py",  # Plugin discovery API methods
    "src/fapilog/plugins/lifecycle.py",  # Component lifecycle API methods
    "src/fapilog/plugins/metadata.py",  # Plugin metadata models with Pydantic fields
    "tests/",  # Test files have expected unused imports and mocks
]

# Whitelist for false positives - legitimate API components
ignore_names = [
    # Audit enum values - part of public API
    "ERROR_RECOVERED",
    "ERROR_ESCALATED", 
    "SYSTEM_STARTUP",
    "SYSTEM_SHUTDOWN",
    "COMPONENT_FAILURE",
    "COMPONENT_RECOVERY",
    "CONFIG_CHANGED",
    "PLUGIN_LOADED", 
    "PLUGIN_UNLOADED",
    "COMPLIANCE_CHECK",
    "AUDIT_LOG_ACCESS",
    "RETENTION_POLICY_APPLIED",
    "SOX",
    "PCI_DSS",
    "SOC2",
    "ISO27001",
    "DEBUG",
    
    # Audit model fields - used via Pydantic serialization
    "archive_after_days",
    "require_integrity_check",
    "audit_access_roles",
    "gdpr_data_subject_rights",
    "hipaa_minimum_necessary",
    "sox_change_control",
    "hostname",
    "process_id",
    "error_category", 
    "error_severity",
    "compliance_level",
    "retention_category",
    "checksum",
    "signature",
    "model_config",
    
    # Audit public API methods
    "log_data_access",
    "get_events",
    "get_statistics", 
    "cleanup",
    
    # Circuit breaker public API
    "call",
    "_can_execute",
    "_record_success",
    "is_closed",
    "is_open", 
    "is_half_open",
    "remove",
    "reset_all",
    "get_all_stats",
    "list_circuit_breakers",
    
    # Context management API
    "error_chain_var",
    "is_completed",
    "operation_duration",
    "add_error_to_current_context",
    "get_context_chain",
    "get_statistics",
    
    # Error handling enum values
    "PLUGIN_CONFIG",
    "SERIALIZATION",
    "DATABASE",
    "SETUP", 
    "ESCALATE",
    "task_name",
    "coroutine_name",
    "call_stack",
    "operation_start_time",
    "to_dict",
    
    # Fallback enum values and config
    "FUNCTION_CALL",
    "DEGRADED_SERVICE", 
    "CHAIN",
    "CIRCUIT_OPEN",
    "RATE_LIMIT",
    "CUSTOM",
    "static_value",
    "fallback_function",
    "cache_ttl",
    "track_fallback_usage",
    
    # Fallback public API methods
    "unregister",
    "get_all_stats",
    "reset_all_stats", 
    "list_fallback_wrappers",
    
    # Retry configuration
    "jitter_factor",
    
    # Context manager protocol parameters (required by __aexit__)
    "exc_val",
    "exc_tb",
    # Config validation helper used dynamically
    "ensure_path_exists",
    # Marketplace settings fields referenced via Pydantic
    "index_url",
    "timeout_seconds",
    "verify_tls",
    # Validation API used across modules
    "raise_if_error",
    # Compliance configuration fields validated via Pydantic
    "allowed_data_classifications",
    # Observability metrics field referenced via Pydantic and external exporters
    "port",
    # Advanced config API components used externally or in tests
    "validate_advanced_settings",
    "ConfigHotReloader",
    "_last_good",
    "subscribe",
    "register_migration",
    "migrate_to_latest",
    # Migration dataclass fields serialized/returned
    "migrated",
    "to_version",
    "did_migrate",
    
    # Core serialization public API used by callers/tests
    "SerializedView",
    "serialize_mapping_to_json_bytes",
    "view",
    # Persistence stats dataclass fields and API names referenced indirectly
    "file_size_bytes",
    "write_offset",
    "total_bytes_written",
    "append_line",
    # Advanced serialization helpers referenced by API/tests
    "SegmentedSerialized",
    "total_length",
    "iter_memoryviews",
    "serialize_protobuf_like",
    "convert_json_bytes_to_jsonl",
    "serialize_custom_fapilog_v1",
    # Parallel processing public API
    "gather_with_limit",
    "process_in_parallel",
    # Concurrency control public API
    "AsyncBoundedExecutor",
    "BackpressurePolicy",
    "BackpressureError",
    "run_all",
    # Adaptive processing public API
    "AdaptiveBatchSizer",
    "AdaptiveController",
    "process_with_adaptive_batches",
    "advise_backpressure",
    # Plugin parallel helpers used by callers/tests
    "enrich_parallel",
    "process_parallel",
    # Plugin zero-copy processor API symbols
    "ZeroCopyProcessor",
    "process_many",
    # Metrics utilities referenced by tests or external integrations
    "create_metrics_collector_from_settings",
    "snapshot",
    # New resource management APIs
    "AsyncResourcePool",
    "HttpClientPool",
    "ResourceManager",
    "acquire",
    "acquire_nowait",
    "release",
    "stats",
    "post_json",
    "AsyncHttpSender",
    # ResourceManager methods and PoolStats fields referenced indirectly
    "register_pool",
    "get_pool",
    "cleanup_all",
    "created",
    "in_use",
    "idle",
    "errors",
    # Lock-free concurrency APIs used by callers/tests
    "LockFreeRingBuffer",
    "await_push",
    "await_pop",
    # Metrics API accessor
    "registry",
]
